// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String      @id @default(cuid())
  name      String?
  email     String   @unique
  phoneNumber String?
  password  String
  avatarUrl String?
  isVerified Boolean @default(false)
  onBanned  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role @default(USER)
  certificate Certificate[]
}


model Course {
  id String @id @default(cuid())
  title String
  slug String
  description String
  price Int
  coverImage String
  isPublished Boolean @default(false)
  sections Section[]
  certificate Certificate[]
  flashSale FlashSale ?
}

model Section {
  id String @id @default(cuid())
  title String
  index Int @default(0)
  courseId String
  lessons Lesson[]
  course Course @relation(fields: [courseId], references: [id])
}

model Lesson {
  id String @id @default(cuid())
  title String
  slug String
  videoUrl String
  index Int @default(0)
  isPreview Boolean @default(false)
  sectionId String
  section Section @relation(fields: [sectionId], references: [id])
}

model FlashSale {
  id String @id @default(cuid())
  newAmount Int
  courseId String @unique
  course Course @relation(fields: [courseId], references: [id])
}

enum RequestStatus {
  UNDER_REVIEW
  APPROVED
  NO_REQUEST
}
model Certificate {
  id String @id @default(cuid())
  userId String @unique
  courseId String @unique
  status RequestStatus @default(NO_REQUEST)
  user User @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

}